#!/usr/bin/env python3
#
# taxonomically classify a novel nucleotide sequence
#

import argparse
import pandas as pd
import json
import os
import sys

#
# parse ARGS
#
parser = argparse.ArgumentParser(description="")
parser.add_argument('-verbose',help="print details during run",action=argparse.BooleanOptionalAction)
parser.add_argument('-indir',help="directory for fasta files with NUCLEOTIDE seqeunces to classify",default="seq_in")
parser.add_argument('-outdir',help="output directory for tax_results.json",default="tax_out")
parser.add_argument('-json',help="output json filename",default="tax_results.json")
parser.add_argument('-html',help="output  html base filename",default="tax_results")
args = parser.parse_args()

print("Hello World")
print("IN_DIR: ", args.indir)
print("OUT_DIR:", args.outdir)
print("OUT_JSON:", args.json)
print("OUT_HTML:", args.html)

#
# read version number
#
with open("version_git.txt") as verfile:
    git_version = verfile.readline().strip()
print("VERSION:", git_version )
#
# hello world data dictionry
#
out_dict = {
    "program_name": os.path.basename(sys.argv[0]),
    "version"  : git_version,
    "input_dir": args.indir,
    "results"  : [
        {
            "input_file"             : "test12.fa",
            "input_seq"              : "test_seq_1",
            "status"                 : "CLASSIFIED",
            "classification_rank"    : "species",
            "classification_lineage" : {"realm":"HelloRealm", "family":"BigFamily", "genus":"WorldGenus", "species":"WorldGenus specius"},
            "blast_htmls"             : { "blast_results": args.html+'_1.html' }
        }
        ,
        {
            "input_file"             : "test12.fa",
            "input_seq"              : "test_seq_2",
            "status"                 : "CLASSIFIED",
            "classification_rank"    : "genus",
            "classification_lineage" : {"realm":"HelloRealm", "family":"BigFamily", "genus":"CountryGenus"},
            "message"                : "Homologous to species within the genus, but not close enough to classify within an existing species",
            "blast_htmls"             : { "blast_results": args.html+'_2.html' }
        }
    ]
}

html_hello_world_pre = """<HTML>
<HEADER><TITLE>hello world HTML"""

html_hello_world_mid = """</TITLE></HEADER>
<BODY>
<H>Hello</H>
<I>world"""

html_hello_world_post = """</I>
</BODY>
</HTML>"""

def concatenate_html(str_val):
    
    return html_hello_world_pre + str_val + html_hello_world_mid + str_val + html_hello_world_post


#
# write output/results
#

# Ensure the output directory exists
os.makedirs(args.outdir, exist_ok=True)

# seq 1 blast html output
html_1_outpath=os.path.join(args.outdir, args.html+'_1.html')
with open(html_1_outpath, "w") as outfile:
    outfile.write(concatenate_html("1"))
print("Wrote: ", html_1_outpath)
outfile.close()

# seq 2 blast html output
html_2_outpath=os.path.join(args.outdir, args.html+'_2.html')
with open(html_2_outpath, "w") as outfile:
    outfile.write(concatenate_html("2"))
print("Wrote: ", html_2_outpath)
outfile.close()

# json job output/summary
json_outpath=os.path.join(args.outdir, args.json)
with open(json_outpath, "w") as outfile:
    json.dump(obj=out_dict, fp=outfile, indent=4)
print("Wrote: ", json_outpath)
outfile.close()



exit(0)


