#!/usr/bin/env python3
#
# taxonomically classify a novel nucleotide sequence
#

import argparse
import pandas as pd
import json
import os
import sys
import subprocess
#
# parse ARGS
#
parser = argparse.ArgumentParser(description="")
parser.add_argument('-verbose',help="print details during run",action=argparse.BooleanOptionalAction)
parser.add_argument('-indir',help="directory for fasta files with NUCLEOTIDE seqeunces to classify",default="seq_in")
parser.add_argument('-outdir',help="output directory for tax_results.json",default="tax_out")
parser.add_argument('-json',help="output json filename",default="tax_results.json")
parser.add_argument('-html',help="output  html base filename",default="tax_results")
parser.add_argument('-blastdb',help="input blast base filename",default="./blast/ICTV_VMR_b")
args = parser.parse_args()

print("Hello World")
print("IN_DIR: ", args.indir)
print("OUT_DIR:", args.outdir)
print("OUT_JSON:", args.json)
print("OUT_HTML:", args.html)

#
# read version number
#
with open("version_git.txt") as verfile:
    git_version = verfile.readline().strip()
print("VERSION:", git_version )


# for eden: get list of fasta files in input directory (.fa/.fna.fasta) 
if args.verbose:
    print("Files in input directory: ", os.listdir(args.indir))
# get list of fasta files
fasta_files = []
for  infilename in os.listdir(args.indir):
    if infilename.endswith(".fa") or infilename.endswith(".fna") or infilename.endswith(".fasta"):
            fasta_files.append (infilename)
print("FASTA files found: ", fasta_files)

# iterate over fasta files
for infilename in fasta_files:
    # read in fasta file
    fasta_file_path = os.path.join(args.indir, infilename)
    blastasn_output_filepath= os.path.join(args.outdir, infilename + ".asn")

    #blast output format commands.

    blastasn_cmd = ["blastn", "-db", args.blastdb , "-query", fasta_file_path , "-out", blastasn_output_filepath, "-outfmt", "11"]
    blastcsv_cmd = ["blastn", "-db", args.blastdb , "-query", fasta_file_path , "-out", blastasn_output_filepath, "-outfmt", "10"]
    blasthtml_cmd = ["blastn", "-db", args.blastdb , "-query", fasta_file_path , "-out", blastasn_output_filepath, "-outfmt", "5"]
    print("ASN Format Command:", " ".join(blastasn_cmd), "\n", "CSV Format Command:", " ".join(blastcsv_cmd), "\n", "HTML Format Command:", " ".join(blasthtml_cmd))
    db_output_asn = subprocess.run(blastasn_cmd, capture_output=True, text=True)
    db_output_csv = subprocess.run(blastcsv_cmd, capture_output=True, text=True)
    db_output_html = subprocess.run(blasthtml_cmd, capture_output=True, text=True)
    

print("Blast output files:", blastasn_output_filepath)

    

    



    
    
   
    
     

    


   



    #files are to be html, csv, asn
    #blast runs first to creat asn then coverts to html and csv


    













#    """  print("Reading fasta file: ", fasta_file_path)
#     with open(fasta_file_path, 'r') as f:
#         fasta_data = f.read()
#         # parse fasta data
#         seqs = fasta_data.split('>')[1:]  # split on '>' and ignore the first element
#         for seq in seqs:
#             header, sequence = seq.split('\n', 1)
#             sequence = sequence.replace('\n', '')
#             print("Header: ", header)
#             print("Sequence: ", sequence) """







#
# hello world data dictionry
#
out_dict = {
    "program_name": os.path.basename(sys.argv[0]),
    "version"  : git_version,
    "input_dir": args.indir,
    "results"  : [
        {
            "input_file"             : "test12.fa",
            "input_seq"              : "test_seq_1",
            "status"                 : "CLASSIFIED",
            "classification_rank"    : "species",
            "classification_lineage" : {"realm":"HelloRealm", "family":"BigFamily", "genus":"WorldGenus", "species":"WorldGenus specius"},
            "blast_html"             : args.html+"_1.html",
            "blast_csv"              : args.html+"_1.csv",
        }
        ,
        {
            "input_file"             : "test12.fa",
            "input_seq"              : "test_seq_2",
            "status"                 : "CLASSIFIED",
            "classification_rank"    : "genus",
            "classification_lineage" : {"realm":"HelloRealm", "family":"BigFamily", "genus":"CountryGenus"},
            "message"                : "Homologous to species within the genus, but not close enough to classify within an existing species",
            "blast_html"             : args.html+"_2.html",
            "blast_csv"              : args.html+"_2.csv",
        }
    ]
}

#
# bogus "hello world" data
#
html_hello_world_pre = """<HTML>
<HEADER><TITLE>hello world HTML"""

html_hello_world_mid = """</TITLE></HEADER>
<BODY>
<H>Hello</H>
<I>world"""

html_hello_world_post = """</I>
</BODY>
</HTML>"""

def concatenate_html(str_val):
    
    return html_hello_world_pre + str_val + html_hello_world_mid + str_val + html_hello_world_post


csv_results_txt = """# BLASTN 2.16.0+
# Query: AY954969.1#Kayvirus_G1 AY954969.1 Staphylococcus phage G1, complete genome
# Database: ./blast/ICTV_VMR_b
# Fields: query acc.ver, subject acc.ver, % identity, alignment length, mismatches, gap opens, q. start, q. end, s. start, s. end, evalue, bit score
# 7 hits found
AY954969.1#Kayvirus_G1,AY954969.1#Kayvirus_G1,100.000,138715,0,0,1,138715,1,138715,0.0,2.562e+05
AY954969.1#Kayvirus_G1,AY954969.1#Kayvirus_G1,95.783,498,12,9,135784,136276,135594,136087,0.0,795
AY954969.1#Kayvirus_G1,AY954969.1#Kayvirus_G1,95.783,498,12,9,135594,136087,135784,136276,0.0,795
AY954969.1#Kayvirus_G1,AY954969.1#Kayvirus_G1,92.208,308,15,9,135974,136276,135594,135897,4.96e-118,427
AY954969.1#Kayvirus_G1,AY954969.1#Kayvirus_G1,92.208,308,15,9,135594,135897,135974,136276,4.96e-118,427
AY954969.1#Kayvirus_G1,AY954969.1#Kayvirus_G1,82.203,118,12,9,136164,136276,135594,135707,2.06e-17,93.5
AY954969.1#Kayvirus_G1,AY954969.1#Kayvirus_G1,82.203,118,12,9,135594,135707,136164,136276,2.06e-17,93.5
# BLAST processed 1 queries
"""

#
# read in better bogus hello world data from filesys
#
hello_world_data_csv_filename="hello_world_data/AY954969.csv"
hello_world_data_html_filename="hello_world_data/AY954969.html"

with open(hello_world_data_csv_filename, 'r') as f:
    hello_world_data_csv = f.read()

with open(hello_world_data_html_filename, 'r') as f:
    hello_world_data_html = f.read()

#
# write output/results
#

# Ensure the output directory exists
os.makedirs(args.outdir, exist_ok=True)

# seq 1 blast html output
html_1_outpath=os.path.join(args.outdir, args.html+'_1.html')
with open(html_1_outpath, "w") as outfile:
    #outfile.write(concatenate_html("1"))
    outfile.write(hello_world_data_html)
print("Wrote: ", html_1_outpath)
outfile.close()

# seq 2 blast html output
html_2_outpath=os.path.join(args.outdir, args.html+'_2.html')
with open(html_2_outpath, "w") as outfile:
    #outfile.write(concatenate_html("2"))
    outfile.write(hello_world_data_html)
print("Wrote: ", html_2_outpath)
outfile.close()

# seq 1 blast CSV output
csv_1_outpath=os.path.join(args.outdir, args.html+'_1.csv')
with open(csv_1_outpath, "w") as outfile:
    #outfile.write(csv_results_txt)
    outfile.write(hello_world_data_csv)
print("Wrote: ", csv_1_outpath)
outfile.close()

# seq 2 blast CSV output
csv_2_outpath=os.path.join(args.outdir, args.html+'_2.csv')
with open(csv_2_outpath, "w") as outfile:
    outfile.write(csv_results_txt)
    outfile.write(hello_world_data_csv)
print("Wrote: ", csv_2_outpath)
outfile.close()

# json job output/summary
json_outpath=os.path.join(args.outdir, args.json)
with open(json_outpath, "w") as outfile:
    json.dump(obj=out_dict, fp=outfile, indent=4)
print("Wrote: ", json_outpath)
outfile.close()



exit(0)


